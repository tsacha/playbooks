--Important for systemd
-- daemonize is important for systemd. if you set this to false the systemd startup will freeze.
daemonize = true
pidfile = "/run/prosody/prosody.pid"

-- Prosody Example Configuration File
--
-- Information on configuring Prosody can be found on our
-- website at https://prosody.im/doc/configure
--
-- Tip: You can check that the syntax of this file is correct
-- when you have finished by running: prosodyctl check config
-- If there are any errors, it will let you know what and where
-- they are, otherwise it will keep quiet.
--
-- The only thing left to do is rename this file to remove the .dist ending, and fill in the
-- blanks. Good luck, and happy Jabbering!


---------- Server-wide settings ----------
-- Settings in this section apply to the whole server and are the default settings
-- for any virtual hosts

-- This is a (by default, empty) list of accounts that are admins
-- for the server. Note that you must create the accounts separately
-- (see https://prosody.im/doc/creating_accounts for info)
-- Example: admins = { "user1@example.com", "user2@example.net" }
admins = { {% for user in ldap.groups['administrators'] %}{{ '"'+ldap.users[user].mail+'"' }}{% if not loop.last %}{{ "," }}{% endif %}{% endfor %} }

-- Enable use of libevent for better performance under high load
-- For more information see: https://prosody.im/doc/libevent
use_libevent = true


https_ports = { 5280 }
https_interfaces = { "*" }

https_ports = { 5281 }
https_interfaces = { "*" }

use_ipv6 = true

plugin_paths = { "/opt/prosody-modules" }

-- This is the list of modules Prosody will load on startup.
-- It looks for mod_modulename.lua in the plugins folder, so make sure that exists too.
-- Documentation on modules can be found at: https://prosody.im/doc/modules
modules_enabled = {

	-- Generally required
		"roster"; -- Allow users to have a roster. Recommended ;)
		"saslauth"; -- Authentication for clients and servers. Recommended if you want to log in.
		"tls"; -- Add support for secure TLS on c2s/s2s connections
		"dialback"; -- s2s dialback support
		"disco"; -- Service discovery

	-- Not essential, but recommended
		"private"; -- Private XML storage (for room bookmarks, etc.)
		"vcard"; -- Allow users to set vCards

	-- These are commented by default as they have a performance impact
		"blocklist"; -- Allow users to block communications with other users

	-- Nice to have
		"version"; -- Replies to server version requests
		"uptime"; -- Report how long server has been running
		"time"; -- Let others know the time here on this server
		"ping"; -- Replies to XMPP pings with pongs
		"pep"; -- Enables users to publish their mood, activity, playing music and more
		"register"; -- Allow users to register on this server using a client and change passwords

	-- Admin interfaces
		"admin_adhoc"; -- Allows administration via an XMPP client that supports ad-hoc commands

	-- HTTP modules
		"bosh"; -- Enable BOSH clients, aka "Jabber over HTTP"
		"http_files"; -- Serve static files from a directory over HTTP
		"websocket";
		"http_altconnect";

	-- Other specific functionality
		"groups"; -- Shared roster support
		"announce"; -- Send announcement to all online users
		"welcome"; -- Welcome users who register accounts
		"watchregistrations"; -- Alert admins of registrations
		"motd"; -- Send a message to users when they log in
		"csi";
		"throttle_presence";
		"filter_chatstates";
		"cloud_notify";
		"extdisco";
		"smacks";
		"bidi";
		"posix";
		"mam";
		"blocklist";
		"lastactivity";
		"carbons";
}

-- Disable account creation by default, for security
-- For more information see https://prosody.im/doc/creating_accounts
allow_registration = false

authentification = "cyrus"
cyrus_service_name = "prosody"

default_storage = "sql"
storage = "sql"

sql = {
  driver = "PostgreSQL";
  database = "prosody";
  host = "{{ postgres_uri }}";
  username = "prosody";
  password = "{% for user in postgres.users %}{% if user['name'] == 'prosody' %}{{ user['password'] }}{% endif %}{% endfor %}";
}

-- External Service Discovery (mod_extdisco)
external_services = {
    ["stun.{{ im.root_domain }}"] = {
	[1] = {
	    port = "3478",
	    transport = "udp",
	    type = "stun"
	},

	[2] = {
	    port = "3478",
	    transport = "tcp",
	    type = "stun"
	}
    }
};

disco_items = {
    { "muc.{{ im.root_domain }}" },
    { "proxy.{{ im.root_domain }}" },
    { "pubsub.{{ im.root_domain }}" },
    { "anonymous.{{ im.root_domain }}" },
    { "up.{{ im.root_domain }}" }
};

-- BOSH configuration (mod_bosh)
bosh_max_inactivity = 30
consider_bosh_secure = true
cross_domain_bosh = true
force_https_bosh = true

-- WebSocket configuration (mod_websocket)
consider_websocket_secure = true
cross_domain_websocket = true

ssl = {
  key = "/etc/prosody/tls/certs/im.{{ im.root_domain }}.key";
  certificate = "/etc/prosody/tls/certs/im.{{ im.root_domain }}.chain.cer";

  dhparam = "/etc/prosody/tls/dhparams.pem";
  options = { "no_sslv2", "no_sslv3", "no_ticket", "no_compression", "cipher_server_preference", "single_dh_use", "single_ecdh_use" };
  ciphers = "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH EDH+aRSA !RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS";
}

c2s_require_encryption = true
s2s_require_encryption = true
s2s_secure_auth = false

log = {
    info = "/var/log/prosody/prosody.log";
    error = "/var/log/prosody/prosody.err";
}

------ Components ------
-- You can specify components to add hosts that provide special services,
-- like multi-user conferences, and transports.

---Set up a MUC (multi-user chat) room server on muc.{{ im.root_domain }}:
Component "muc.{{ im.root_domain }}" "muc"
    name = "Chatrooms"

    modules_enabled = {
	"muc_limits";
	"muc_log";
	"muc_log_http";
	"pastebin";
    }

    muc_event_rate = 0.5
    muc_burst_factor = 10

    muc_log_http_config = {
	url_base = "logs";
	theme = "prosody";
    }

    pastebin_url = "https://muc.{{ im.root_domain }}/paste/"
    pastebin_path = "/paste/"
    pastebin_expire_after = 0
    pastebin_trigger = "!paste"

---Set up a PubSub server
Component "pubsub.{{ im.root_domain }}" "pubsub"
    name = "Publish/Subscribe"
    pubsub_admins = { {% for user in ldap.groups['administrators'] %}{{ '"'+ldap.users[user].mail+'"' }}{% if not loop.last %}{{ "," }}{% endif %}{% endfor %} }
    unrestricted_node_creation = true

---Set up a BOSH service
Component "bind.{{ im.root_domain }}" "http"
    modules_enabled = { "bosh" }

---Set up a WebSocket service
Component "websocket.{{ im.root_domain }}" "http"
    modules_enabled = { "websocket" }

---Set up a BOSH + WebSocket service
Component "me.{{ im.root_domain }}" "http"
    modules_enabled = { "bosh", "websocket" }


Component "up.{{ im.root_domain }}" "http_upload"

---Set up a statistics service
Component "stats.{{ im.root_domain }}" "http"
    modules_enabled = { "server_status" }
    server_status_basepath = "/xmppd/"
    server_status_show_hosts = { {% for domain in im.domains %}"{{ domain }}", {% endfor %}"anonymous.{{ im.root_domain }}" }
    server_status_show_comps = { "muc.{{ im.root_domain }}", "proxy.{{ im.root_domain }}", "pubsub.{{ im.root_domain }}" }

-- Set up a SOCKS5 bytestream proxy for server-proxied file transfers:
Component "proxy.{{ im.root_domain }}" "proxy65"
    proxy65_acl = { "{{ im.root_domain }}", "anonymous.{{ im.root_domain }}" }


----------- Virtual hosts -----------
-- You need to add a VirtualHost entry for each domain you wish Metronome to serve.
-- Settings under each VirtualHost entry apply *only* to that host.
VirtualHost "anonymous.{{ im.root_domain }}"
    enabled = true
    authentication = "anonymous"
    allow_anonymous_multiresourcing = true
    allow_anonymous_s2s = false
    anonymous_jid_gentoken = "Anonymous User"
    anonymous_randomize_for_trusted_addresses = { "127.0.0.1", "::1" }
    default_storage = "sql"
    storage = "sql"

{% for domain in im.domains %}
VirtualHost "{{ domain }}"
    enabled = true
    authentication = "cyrus"
    default_storage = "sql"
    storage = "sql"

    mam_stores_cap = 1000
    resources_limit = 10

    ssl = {
      key = "/etc/prosody/tls/certs/{{ domain }}.key";
      certificate = "/etc/prosody/tls/certs/{{ domain }}.chain.cer";

      dhparam = "/etc/prosody/tls/dhparams.pem";
      options = { "no_sslv2", "no_sslv3", "no_ticket", "no_compression", "cipher_server_preference", "single_dh_use", "single_ecdh_use" };
      ciphers = "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH EDH+aRSA !RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS";
    }

{% endfor %}
